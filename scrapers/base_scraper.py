import asyncio
import aiohttp
import ssl
import random
import json
from datetime import datetime
from utils.logger import logger
from config import Config

class BaseScraper:
    def __init__(self, db):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–∫—Ä–∞–ø–µ—Ä–∞
        
        Args:
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ MongoDB –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        """
        self.db = db
        self.session = None
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0"
        ]
    
    async def create_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP-—Å–µ—Å—Å–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞"""
        if self.session is None or self.session.closed:
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            connector = aiohttp.TCPConnector(ssl=ssl_context, limit=5)
            timeout = aiohttp.ClientTimeout(total=30, connect=10)
            
            self.session = aiohttp.ClientSession(
                connector=connector, 
                timeout=timeout,
                headers=self.get_headers()
            )
            logger.debug("‚úÖ HTTP-—Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP-—Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()
            logger.debug("‚úÖ HTTP-—Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
    
    def get_headers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π User-Agent"""
        return {
            "User-Agent": random.choice(self.user_agents),
            "Accept": "text/html,application/xhtml+xml,application/xml;application/json;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "es-ES,es;q=0.9,en-US;q=0.8,en;q=0.7",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1"
        }
    
    async def fetch_with_retry(self, url, method="GET", json=None, data=None, params=None):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        
        Args:
            url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            method: HTTP-–º–µ—Ç–æ–¥ (GET, POST)
            json: JSON-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            data: –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            params: URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            tuple: (—Å—Ç–∞—Ç—É—Å_–∑–∞–ø—Ä–æ—Å–∞, –¥–∞–Ω–Ω—ã–µ_–æ—Ç–≤–µ—Ç–∞)
        """
        await self.create_session()
        
        for attempt in range(1, Config.MAX_RETRIES + 1):
            try:
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await asyncio.sleep(random.uniform(1, 3))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                headers = self.get_headers()
                
                if method.upper() == "GET":
                    async with self.session.get(url, headers=headers, params=params) as response:
                        logger.debug(f"üì° GET-–∑–∞–ø—Ä–æ—Å –∫ {url}, —Å—Ç–∞—Ç—É—Å: {response.status}")
                        if response.status == 200:
                            if 'application/json' in response.headers.get('Content-Type', ''):
                                data = await response.json()
                            else:
                                data = await response.text()
                            return True, data
                        else:
                            logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å {response.status} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            error_text = await response.text()
                            logger.debug(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text[:500]}...")
                
                elif method.upper() == "POST":
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logger.debug(f"üì° POST-–∑–∞–ø—Ä–æ—Å –∫ {url}")
                    if json:
                        logger.debug(f"üì¶ JSON-–¥–∞–Ω–Ω—ã–µ: {json}")
                    if data:
                        logger.debug(f"üì¶ Form-–¥–∞–Ω–Ω—ã–µ: {data}")
                    if params:
                        logger.debug(f"üì¶ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
                    
                    async with self.session.post(url, headers=headers, json=json, data=data, params=params) as response:
                        logger.debug(f"üì° POST-–∑–∞–ø—Ä–æ—Å –∫ {url}, —Å—Ç–∞—Ç—É—Å: {response.status}")
                        if response.status == 200:
                            content_type = response.headers.get('Content-Type', '')
                            logger.debug(f"üìÑ Content-Type: {content_type}")
                            
                            if 'application/json' in content_type:
                                data = await response.json()
                            else:
                                data = await response.text()
                                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –¥–∞–∂–µ –µ—Å–ª–∏ Content-Type –Ω–µ JSON
                                if data and (data.startswith('{') or data.startswith('[')):
                                    try:
                                        data = json.loads(data)
                                        logger.debug(f"üìä –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ JSON –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
                                    except json.JSONDecodeError:
                                        logger.debug(f"üìù –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º")
                            
                            return True, data
                        else:
                            logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å {response.status} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            error_text = await response.text()
                            logger.debug(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text[:500]}...")
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
                wait_time = Config.RETRY_DELAY * (2 ** (attempt - 1))
                logger.debug(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π")
                await asyncio.sleep(wait_time)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                await asyncio.sleep(Config.RETRY_DELAY * attempt)
        
        logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ {url} –Ω–µ —É–¥–∞–ª–∏—Å—å")
        return False, None
    
    async def fetch_cars(self, filters=None):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ")
    
    async def process_car_data(self, car_data):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ")
