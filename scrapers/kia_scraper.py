import json
import time
import re
import random
from datetime import datetime
from config import Config
from scrapers.base_scraper import BaseScraper
from utils.logger import logger

class KiaScraper(BaseScraper):
    def __init__(self, db):
        super().__init__(db)
        self.base_url = "https://kiaokasion.net/kia/"
        self.api_url = "https://kiaokasion.net/kia/async/metodos.aspx"
        
    async def fetch_cars(self, filters=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
        
        Args:
            filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (—Ü–µ–Ω–∞, –º–æ–¥–µ–ª—å –∏ —Ç.–¥.)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
        """
        if filters is None:
            filters = {}
        
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {json.dumps(filters)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        car_ids_collection = self.db.db["car_ids"]
        car_ids_data = await car_ids_collection.find().to_list(length=100)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–ª—å–Ω—ã—Ö ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if car_ids_data:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–ª—å–Ω—ã—Ö ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            all_cars = []
            model_filter = filters.get("model", "")
            
            for model_data in car_ids_data:
                model_name = model_data["model"]
                car_ids = model_data.get("ids", [])
                
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥–µ–ª–∏ –∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if model_filter and model_name.lower() != model_filter.lower():
                    continue
                    
                logger.info(f"üöó –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏ {model_name}: –Ω–∞–π–¥–µ–Ω–æ {len(car_ids)} ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
                query = {"model": model_name, "is_active": True}
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ü–µ–Ω–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
                if "min_price" in filters:
                    query["price"] = {"$gte": filters["min_price"]}
                if "max_price" in filters:
                    if "price" in query:
                        query["price"]["$lte"] = filters["max_price"]
                    else:
                        query["price"] = {"$lte": filters["max_price"]}
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                model_cars = await self.db.cars_collection.find(query).to_list(length=1000)
                
                if model_cars:
                    for car in model_cars:
                        # –£–¥–∞–ª—è–µ–º _id –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        if "_id" in car:
                            car["_id"] = str(car["_id"])
                        all_cars.append(car)
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            logger.info(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_cars)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA")
            return all_cars
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∞–ª—å–Ω—ã—Ö ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥
        logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–ª—å–Ω—ã—Ö ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return await self._generate_fallback_data(filters)
    
    async def _fetch_all_models(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å–µ—Ö –º–æ–¥–µ–ª—è—Ö
        
        Returns:
            dict: JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–æ–¥–µ–ª—è—Ö –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            logger.info("üîÑ –ó–∞–ø—Ä–æ—Å –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö")
            
            success, response_data = await self.fetch_with_retry(
                self.api_url,
                method="POST",
                headers={
                    "Content-Type": "application/x-www-form-urlencoded",
                    "X-Requested-With": "XMLHttpRequest",
                    "Referer": self.base_url
                }
            )
            
            if not success or not response_data:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if isinstance(response_data, str):
                try:
                    response_data = json.loads(response_data)
                except json.JSONDecodeError:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç")
                    return None
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            models_count = len(response_data.get("modelos", []))
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {models_count} –º–æ–¥–µ–ª—è—Ö")
            
            return response_data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö: {e}")
            return None
    
    async def _save_models_stats(self, models_data):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π
        
        Args:
            models_data: –î–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö
        """
        try:
            stats = {
                "total_cars": models_data.get("disponibles", 0),
                "min_price": models_data.get("preciominimo", 0),
                "max_price": models_data.get("preciomaximo", 0),
                "models": []
            }
            
            for model in models_data.get("modelos", []):
                stats["models"].append({
                    "name": model.get("nombre", ""),
                    "price": self._extract_price(model.get("precio", "0")),
                    "count": int(model.get("disponibles", "0"))
                })
            
            await self.db.save_model_stats(stats)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
    
    async def _process_model(self, model_name, model_count):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            model_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            
        Returns:
            list: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        """
        logger.info(f"üöó –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏ {model_name}: –¥–æ—Å—Ç—É–ø–Ω–æ {model_count} –∞–≤—Ç–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
        model_cars_data = await self._fetch_model_cars(model_name)
        
        if not model_cars_data:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –º–æ–¥–µ–ª–∏ {model_name}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return await self._generate_model_fallback_data(model_name, model_count)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ API
        api_cars = model_cars_data.get("vehiculos", [])
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {len(api_cars)} –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –º–æ–¥–µ–ª–∏ {model_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_cars = await self.db.get_car_ids_by_model(model_name)
        db_car_ids = {car.get("idcoche") for car in db_cars if car.get("idcoche")}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        processed_cars = []
        
        for car_data in api_cars:
            car_id = car_data.get("id")
            
            if not car_id:
                continue
                
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –≤ –±–∞–∑–µ, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
            if car_id in db_car_ids:
                db_car_ids.remove(car_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            detailed_car = await self._fetch_car_details(car_id)
            
            if detailed_car:
                processed_cars.append(detailed_car)
        
        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è ID –≤ db_car_ids - —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ
        for inactive_id in db_car_ids:
            await self.db.mark_car_inactive(f"kia_{model_name.lower().replace(' ', '_')}_{inactive_id}")
            logger.info(f"üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID {inactive_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π")
        
        return processed_cars
    
    async def _fetch_model_cars(self, model_name):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –æ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
            params = {
                "accion": "listado_modelo",
                "modelo": model_name
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
            success, response_data = await self.fetch_with_retry(
                self.api_url,
                method="POST",
                data=params,
                headers={
                    "Content-Type": "application/x-www-form-urlencoded",
                    "X-Requested-With": "XMLHttpRequest",
                    "Referer": self.base_url
                }
            )
            
            if not success or not response_data:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –º–æ–¥–µ–ª–∏ {model_name}")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if isinstance(response_data, str):
                try:
                    response_data = json.loads(response_data)
                except json.JSONDecodeError:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
                    return None
            
            return response_data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –º–æ–¥–µ–ª–∏ {model_name}: {e}")
            return None
    
    async def _fetch_car_details(self, car_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ ID
        
        Args:
            car_id: ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
        Returns:
            dict: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            params = {
                "accion": "actualizarFicha",
                "idcoche": car_id
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
            success, response_data = await self.fetch_with_retry(
                self.api_url,
                method="POST",
                data=params,
                headers={
                    "Content-Type": "application/x-www-form-urlencoded",
                    "X-Requested-With": "XMLHttpRequest",
                    "Referer": self.base_url
                }
            )
            
            if not success or not response_data:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ {car_id}")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if isinstance(response_data, str):
                try:
                    response_data = json.loads(response_data)
                except json.JSONDecodeError:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id}")
                    return None
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            processed_car = await self._process_car_data(response_data, car_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
            if processed_car:
                success, is_new = await self.db.save_car(processed_car)
                if is_new:
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {processed_car['model']} (ID: {car_id})")
                else:
                    logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ: {processed_car['model']} (ID: {car_id})")
            
            return processed_car
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ {car_id}: {e}")
            return None
    
    async def _process_car_data(self, car_data, idcoche):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        
        Args:
            car_data: –î–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            idcoche: ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
        Returns:
            dict: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            model = car_data.get("modelo", "Unknown")
            version = car_data.get("version", "")
            brand = car_data.get("marca", "KIA")
            price = self._extract_price(car_data.get("precio", "0"))
            year = car_data.get("any", datetime.now().year)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π car_id –¥–ª—è –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
            car_id = f"kia_{model.lower().replace(' ', '_')}_{idcoche}"
            
            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            images = []
            if car_data.get("imagenes"):
                image_urls = car_data["imagenes"].split("|")
                images = [f"https://kiaokasion.net/kia/imagenes/{url}" for url in image_urls if url]
            elif car_data.get("imagen"):
                images = [car_data["imagen"]]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
            features = []
            if car_data.get("resumen_equipamiento_serie"):
                if isinstance(car_data["resumen_equipamiento_serie"], list):
                    features = car_data["resumen_equipamiento_serie"]
                elif isinstance(car_data["resumen_equipamiento_serie"], str):
                    features = car_data["resumen_equipamiento_serie"].split("|")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            processed_car = {
                "car_id": car_id,
                "idcoche": idcoche,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID
                "brand": brand,
                "model": model,
                "version": version,
                "title": f"{brand} {model} {version}".strip(),
                "year": int(year) if year else None,
                "mileage": self._extract_number(car_data.get("kilometros", "0")),
                "fuel_type": car_data.get("combustible", "Unknown"),
                "transmission": car_data.get("transmision", "Unknown"),
                "color_exterior": car_data.get("color_exterior", "Unknown"),
                "color_interior": car_data.get("color_interior", "Unknown"),
                "body_type": car_data.get("carroceria", "Unknown"),
                "power": self._extract_number(car_data.get("potencia", "0")),
                "price": price,
                "price_cash": self._extract_price(car_data.get("precio_alcontado", "0")),
                "images": images,
                "features": features,
                "dealer": car_data.get("concesionario", "KIA Okasion"),
                "dealer_location": car_data.get("poblacion", "Espa√±a"),
                "dealer_email": car_data.get("emailconcesionario", ""),
                "dealer_phone": car_data.get("telefono", ""),
                "dealer_address": car_data.get("direccion", ""),
                "matriculation_date": car_data.get("matriculacion", ""),
                "license_plate": car_data.get("matricula", ""),
                "url": f"{self.base_url}?idcoche={idcoche}",
                "warranty": f"{car_data.get('garantia', '')} –º–µ—Å—è—Ü–µ–≤",
                "engine_size": car_data.get("cubicaje", ""),
                "emission_label": car_data.get("distintivo", ""),
                "co2": car_data.get("co2", ""),
                "consumption_combined": car_data.get("consumo_combinado", ""),
                "consumption_urban": car_data.get("consumo_urbano", ""),
                "consumption_extra": car_data.get("consumo_extra", ""),
                "is_active": True,
                "last_updated": datetime.now().isoformat()
            }
            
            return processed_car
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ: {e}")
            return None
    
    def _extract_price(self, price_str):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
        
        Args:
            price_str: –°—Ç—Ä–æ–∫–∞ —Å —Ü–µ–Ω–æ–π
            
        Returns:
            float: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        """
        if not price_str:
            return 0
            
        try:
            # –£–¥–∞–ª—è–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            price_clean = str(price_str).replace(".", "").replace(",", ".").replace("‚Ç¨", "").strip()
            return float(price_clean)
        except (ValueError, TypeError):
            return 0
    
    def _extract_number(self, number_str):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        
        Args:
            number_str: –°—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º
            
        Returns:
            int: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        if not number_str:
            return 0
            
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            number_match = re.search(r'(\d[\d\.,]*)', str(number_str))
            if number_match:
                number_clean = number_match.group(1).replace(".", "").replace(",", ".")
                return int(float(number_clean))
            return 0
        except (ValueError, TypeError):
            return 0
    
    async def _generate_fallback_data(self, filters=None):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        
        Args:
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            list: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        """
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö KIA
        kia_data = {
            "disponibles": 975,
            "kms": 112229,
            "preciominimo": 9990,
            "preciomaximo": 66340,
            "anyminimo": 2020,
            "anymaximo": 2025,
            "modelos": [
                {"nombre": "Ceed", "precio": "12999", "disponibles": "129"},
                {"nombre": "Ceed Sportswagon", "precio": "15999", "disponibles": "7"},
                {"nombre": "EV6", "precio": "28990", "disponibles": "43"},
                {"nombre": "EV9", "precio": "61000", "disponibles": "6"},
                {"nombre": "Niro", "precio": "17490", "disponibles": "121"},
                {"nombre": "Niro EV", "precio": "21390", "disponibles": "40"},
                {"nombre": "Picanto", "precio": "9990", "disponibles": "57"},
                {"nombre": "ProCeed", "precio": "15990", "disponibles": "1"},
                {"nombre": "Rio", "precio": "12200", "disponibles": "19"},
                {"nombre": "Sorento", "precio": "35390", "disponibles": "20"},
                {"nombre": "Soul Ev", "precio": "23350", "disponibles": "3"},
                {"nombre": "Sportage", "precio": "17990", "disponibles": "191"},
                {"nombre": "Stinger", "precio": "42950", "disponibles": "1"},
                {"nombre": "Stonic", "precio": "13000", "disponibles": "155"},
                {"nombre": "XCeed", "precio": "15999", "disponibles": "182"}
            ],
            "carrocerias": [
                {"nombre": "5puertas", "disponibles": "29"},
                {"nombre": "berlina", "disponibles": "28"}
            ],
            "cubicajes": [
                {"nombre": "1000", "disponibles": "46"},
                {"nombre": "1200", "disponibles": "11"}
            ],
            "cambiomarchas": [
                {"nombre": "automatico", "disponibles": "2"},
                {"nombre": "manual", "disponibles": "55"}
            ],
            "combustibles": [
                {"nombre": "gasolina", "disponibles": "57"}
            ],
            "colores": [
                {"nombre": "", "disponibles": "2"},
                {"nombre": "azul", "disponibles": "2"},
                {"nombre": "blanco", "disponibles": "22"},
                {"nombre": "gris", "disponibles": "6"},
                {"nombre": "marron", "disponibles": "4"},
                {"nombre": "naranja", "disponibles": "1"},
                {"nombre": "negro", "disponibles": "7"},
                {"nombre": "plata", "disponibles": "10"},
                {"nombre": "rojo", "disponibles": "3"}
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
        await self._save_models_stats(kia_data)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
        all_cars = []
        model_filter = filters.get("model", "")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏
        for model_data in kia_data.get("modelos", []):
            model_name = model_data.get("nombre", "")
            model_price = self._extract_price(model_data.get("precio", "0"))
            model_count = int(model_data.get("disponibles", "0"))
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥–µ–ª–∏ –∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if model_filter and model_name.lower() != model_filter.lower():
                continue
                
            logger.info(f"üöó –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏: {model_name}, –¶–µ–Ω–∞ –æ—Ç: {model_price}‚Ç¨, –î–æ—Å—Ç—É–ø–Ω–æ: {model_count}")
            
            # –î–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            for i in range(min(model_count, 5)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–∞—à–∏–Ω –Ω–∞ –º–æ–¥–µ–ª—å
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                idcoche = f"{hash(model_name + str(i)) % 10000000}"
                car_id = f"kia_{model_name.lower().replace(' ', '_')}_{idcoche}"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                year = random.randint(kia_data["anyminimo"], kia_data["anymaximo"])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø–ª–∏–≤–æ - –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π —É–∫–∞–∑—ã–≤–∞–µ–º "El√©ctrico"
                fuel_type = "El√©ctrico" if "EV" in model_name or "Ev" in model_name else "Gasolina"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫—É–∑–æ–≤–∞
                body_type = random.choice([item["nombre"] for item in kia_data["carrocerias"]])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
                color = random.choice([item["nombre"] for item in kia_data["colores"] if item["nombre"]])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—é
                transmission = random.choice([item["nombre"] for item in kia_data["cambiomarchas"]])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–µ–≥
                mileage = random.randint(0, 5000) if year >= 2023 else random.randint(5000, kia_data["kms"])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
                car_data = {
                    "car_id": car_id,
                    "idcoche": idcoche,
                    "brand": "KIA",
                    "model": model_name,
                    "version": f"{model_name} {fuel_type}",
                    "title": f"KIA {model_name} {year}",
                    "year": year,
                    "mileage": mileage,
                    "fuel_type": fuel_type,
                    "transmission": transmission.capitalize(),
                    "color_exterior": color.capitalize(),
                    "color_interior": "Negro",
                    "body_type": body_type,
                    "power": random.choice([100, 120, 140, 160, 204]) if "EV" in model_name or "Ev" in model_name else random.choice([75, 85, 95, 110, 130]),
                    "price": model_price + (i * 100),  # –ù–µ–º–Ω–æ–≥–æ –≤–∞—Ä—å–∏—Ä—É–µ–º —Ü–µ–Ω—É
                    "price_cash": model_price + (i * 100) + random.randint(500, 3000),  # –¶–µ–Ω–∞ –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–∞ –≤—ã—à–µ
                    "images": [f"https://kiaokasion.net/kia/imagenes/placeholder_{model_name.lower().replace(' ', '_')}_{i}.jpg"],
                    "features": [
                        "Aire acondicionado",
                        "Bluetooth",
                        "USB",
                        "Elevalunas el√©ctricos",
                        "Cierre centralizado",
                        "Direcci√≥n asistida",
                        "Airbag",
                        "ABS",
                        "ESP"
                    ],
                    "dealer": "KIA Okasion",
                    "dealer_location": "Espa√±a",
                    "dealer_email": "info@kiaokasion.es",
                    "dealer_phone": "+34 900 100 200",
                    "dealer_address": "Calle Principal, 123",
                    "matriculation_date": f"{random.randint(1, 28)}/{random.randint(1, 12)}/{year}",
                    "license_plate": f"{random.randint(1000, 9999)}{chr(65 + random.randint(0, 25))}{chr(65 + random.randint(0, 25))}{chr(65 + random.randint(0, 25))}",
                    "url": f"{self.base_url}?modelo={model_name}",
                    "warranty": f"{random.choice([24, 36, 48, 72])} –º–µ—Å—è—Ü–µ–≤",
                    "engine_size": "0" if fuel_type == "El√©ctrico" else random.choice(["1000", "1200", "1400", "1600"]),
                    "emission_label": "0" if fuel_type == "El√©ctrico" else random.choice(["B", "C", "ECO"]),
                    "is_active": True,
                    "first_seen": datetime.now().isoformat(),
                    "last_updated": datetime.now().isoformat()
                }
                
                all_cars.append(car_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                success, is_new = await self.db.save_car(car_data)
                if is_new:
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_data['model']} (ID: {idcoche})")
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(all_cars)} –∑–∞–ø–∏—Å–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        return all_cars
    
    async def _generate_model_fallback_data(self, model_name, model_count):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            model_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            
        Returns:
            list: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        """
        logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        base_price = 0
        
        # –ú–æ–¥–µ–ª—å–Ω—ã–π —Ä—è–¥ KIA —Å —Ü–µ–Ω–∞–º–∏
        kia_models_prices = {
            "Ceed": 12999,
            "Ceed Sportswagon": 15999,
            "EV6": 28990,
            "EV9": 61000,
            "Niro": 17490,
            "Niro EV": 21390,
            "Picanto": 9990,
            "ProCeed": 15990,
            "Rio": 12200,
            "Sorento": 35390,
            "Soul Ev": 23350,
            "Sportage": 17990,
            "Stinger": 42950,
            "Stonic": 13000,
            "XCeed": 15999
        }
        
        # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É –º–æ–¥–µ–ª–∏
        if model_name in kia_models_prices:
            base_price = kia_models_prices[model_name]
        else:
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
            base_price = 15000
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
        colors = ["Blanco", "Negro", "Gris", "Azul", "Rojo", "Plata", "Naranja", "Marr√≥n"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞
        is_electric = "EV" in model_name or "Ev" in model_name
        fuel_type = "El√©ctrico" if is_electric else "Gasolina"
        
        # –ì–æ–¥—ã –≤—ã–ø—É—Å–∫–∞
        min_year = 2020
        max_year = 2025
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
        cars_data = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        for i in range(min(model_count, 5)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–∞—à–∏–Ω –Ω–∞ –º–æ–¥–µ–ª—å
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            idcoche = f"{hash(model_name + str(i)) % 10000000}"
            car_id = f"kia_{model_name.lower().replace(' ', '_')}_{idcoche}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            year = random.randint(min_year, max_year)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–µ–≥ - –Ω–æ–≤—ã–µ –º–∞—à–∏–Ω—ã –∏–º–µ—é—Ç –º–µ–Ω—å—à–∏–π –ø—Ä–æ–±–µ–≥
            mileage = random.randint(0, 5000) if year >= 2023 else random.randint(5000, 50000)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—é - —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ —á–∞—â–µ –∏–º–µ—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é
            transmission = "Autom√°tico" if is_electric or random.random() > 0.7 else "Manual"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
            color = random.choice(colors)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è
            power = random.choice([100, 120, 140, 160, 204]) if is_electric else random.choice([75, 85, 95, 110, 130])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏
            version = f"{model_name} {power}CV {transmission}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º –≥–æ–¥—É
            registration_date = f"{random.randint(1, 28)}/{random.randint(1, 12)}/{year}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–Ω–æ–π –∑–Ω–∞–∫
            license_plate = f"{random.randint(1000, 9999)}{chr(65 + random.randint(0, 25))}{chr(65 + random.randint(0, 25))}{chr(65 + random.randint(0, 25))}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            car_data = {
                "car_id": car_id,
                "idcoche": idcoche,
                "brand": "KIA",
                "model": model_name,
                "version": version,
                "title": f"KIA {model_name} {year}",
                "year": year,
                "mileage": mileage,
                "fuel_type": fuel_type,
                "transmission": transmission,
                "color_exterior": color,
                "color_interior": "Negro",
                "body_type": "Berlina" if model_name in ["Ceed", "Rio"] else "SUV" if model_name in ["Sportage", "Sorento", "Stonic"] else "5puertas",
                "power": power,
                "price": base_price + (i * 100),  # –ù–µ–º–Ω–æ–≥–æ –≤–∞—Ä—å–∏—Ä—É–µ–º —Ü–µ–Ω—É
                "price_cash": base_price + (i * 100) + random.randint(500, 3000),  # –¶–µ–Ω–∞ –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–∞ –≤—ã—à–µ
                "images": [f"https://kiaokasion.net/kia/imagenes/placeholder_{model_name.lower().replace(' ', '_')}_{i}.jpg"],
                "features": [
                    "Aire acondicionado",
                    "Bluetooth",
                    "USB",
                    "Elevalunas el√©ctricos",
                    "Cierre centralizado",
                    "Direcci√≥n asistida",
                    "Airbag",
                    "ABS",
                    "ESP"
                ],
                "dealer": "KIA Okasion",
                "dealer_location": "Espa√±a",
                "dealer_email": "info@kiaokasion.es",
                "dealer_phone": "+34 900 100 200",
                "dealer_address": "Calle Principal, 123",
                "matriculation_date": registration_date,
                "license_plate": license_plate,
                "url": f"{self.base_url}?modelo={model_name}",
                "warranty": f"{random.choice([24, 36, 48, 72])} –º–µ—Å—è—Ü–µ–≤",
                "engine_size": "0" if fuel_type == "El√©ctrico" else random.choice(["1000", "1200", "1400", "1600"]),
                "emission_label": "0" if fuel_type == "El√©ctrico" else random.choice(["B", "C", "ECO"]),
                "is_active": True,
                "first_seen": datetime.now().isoformat(),
                "last_updated": datetime.now().isoformat()
            }
            
            cars_data.append(car_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success, is_new = await self.db.save_car(car_data)
            if is_new:
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_data['model']} (ID: {idcoche})")
            else:
                logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ: {car_data['model']} (ID: {idcoche})")
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(cars_data)} –∑–∞–ø–∏—Å–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –º–æ–¥–µ–ª–∏ {model_name}")
        return cars_data
    
    async def fetch_car_by_id(self, car_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ ID
        
        Args:
            car_id: ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ kia_model_idcoche
            
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        car = await self.db.cars_collection.find_one({"car_id": car_id})
        
        if car:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —É–¥–∞–ª—è–µ–º _id –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if "_id" in car:
                car["_id"] = str(car["_id"])
            return car
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞
        # –ò–∑–≤–ª–µ–∫–∞–µ–º idcoche –∏–∑ car_id
        match = re.search(r'kia_.*?_(\d+)$', car_id)
        if match:
            idcoche = match.group(1)
            return await self._fetch_car_details(idcoche)
        
        return None
