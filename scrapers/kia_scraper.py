import json
from datetime import datetime
from config import Config
from scrapers.base_scraper import BaseScraper
from utils.logger import logger

class KiaScraper(BaseScraper):
    def __init__(self, db):
        super().__init__(db)
        self.base_url = Config.KIA_BASE_URL
        self.api_url = Config.KIA_API_URL
        
    async def fetch_cars(self, filters=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        Args:
            filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (—Ü–µ–Ω–∞, –º–æ–¥–µ–ª—å –∏ —Ç.–¥.)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
        """
        if filters is None:
            filters = {}
        
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {json.dumps(filters)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        await self.create_session()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –æ–±—ä–µ–∫—Ç–µ —Å–µ—Å—Å–∏–∏
        if self.session and not self.session.closed:
            self.session.headers.update({
                "Accept": "application/json, text/javascript, */*; q=0.01",
                "Accept-Language": "es-ES,es;q=0.9,ru;q=0.8,en-US;q=0.7,en;q=0.6",
                "Content-Type": "application/x-www-form-urlencoded",
                "X-Requested-With": "XMLHttpRequest",
                "Referer": "https://kiaokasion.net/kia/",
                "Origin": "https://kiaokasion.net"
            })
        
        # –ü–æ –¥–∞–Ω–Ω—ã–º –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤–∏–¥–Ω–æ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ API –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π POST-–∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        success, response_data = await self.fetch_with_retry(
            self.api_url,
            method="POST"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        logger.info(f"üì° –ó–∞–ø—Ä–æ—Å –∫ API: {self.api_url}")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {'—É—Å–ø–µ—à–Ω–æ' if success else '–Ω–µ—É–¥–∞—á–Ω–æ'}")
        
        if not success or not response_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API KIA Okasion")
            return []
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"üì• –û—Ç–≤–µ—Ç API: {response_data[:500]}..." if isinstance(response_data, str) else f"üì• –û—Ç–≤–µ—Ç API: {str(response_data)[:500]}...")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        cars_data = []
        try:
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ JSON
            if isinstance(response_data, str):
                try:
                    response_data = json.loads(response_data)
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç: {e}")
                    logger.debug(f"üìÑ –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_data[:200]}")
                    return []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            disponibles = response_data.get("disponibles", 0)
            logger.info(f"‚úÖ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {disponibles}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö
            models_data = response_data.get("modelos", [])
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(models_data)} –º–æ–¥–µ–ª–µ–π KIA")
            
            # –î–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            for model_data in models_data:
                model_name = model_data.get("nombre", "Unknown")
                model_price = self._extract_price(model_data.get("precio", "0"))
                model_count = int(model_data.get("disponibles", "0"))
                
                logger.info(f"‚ú® –ú–æ–¥–µ–ª—å: {model_name}, –¶–µ–Ω–∞ –æ—Ç: {model_price}‚Ç¨, –î–æ—Å—Ç—É–ø–Ω–æ: {model_count} —à—Ç.")
                
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –∏ –æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if "model" in filters and filters["model"] and model_name.lower() != filters["model"].lower():
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ü–µ–Ω—ã
                if "min_price" in filters and model_price < filters["min_price"]:
                    continue
                if "max_price" in filters and model_price > filters["max_price"]:
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
                for i in range(model_count):
                    car_id = f"kia_{model_name.lower().replace(' ', '_')}_{i}"
                    
                    car_data = {
                        "car_id": car_id,
                        "brand": "KIA",
                        "model": model_name,
                        "title": f"KIA {model_name}",
                        "price": model_price,
                        "dealer": "KIA Okasion",
                        "dealer_location": "Espa√±a",
                        "url": f"{self.base_url}?modelo={model_name}",
                        "last_updated": datetime.now().isoformat()
                    }
                    
                    cars_data.append(car_data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await self.db.save_car(car_data)
                
                # –ï—Å–ª–∏ —ç—Ç–æ Picanto –∏–ª–∏ –¥—Ä—É–≥–∞—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è –º–æ–¥–µ–ª—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
                if model_name == "Picanto" or model_name == filters.get("model", ""):
                    await self._fetch_additional_model_info(model_name)
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö KIA: {e}")
        
        return cars_data
    
    async def _fetch_additional_model_info(self, model_name):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        """
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ XHR-–∑–∞–ø—Ä–æ—Å–æ–≤, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–π URL –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
        try:
            # –ü—Ä–∏–º–µ—Ä: –∑–∞–ø—Ä–æ—Å, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ
            post_data = {
                "modelo": model_name
            }
            
            success, response_data = await self.fetch_with_retry(
                self.api_url,
                method="POST",
                data=post_data
            )
            
            if success and response_data:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ
                if isinstance(response_data, str):
                    try:
                        response_data = json.loads(response_data)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª—é—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        logger.debug(f"üìä –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(response_data.keys())}")
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
                        
                    except json.JSONDecodeError:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç –¥–ª—è {model_name}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {model_name}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {model_name}: {e}")
    
    def _extract_price(self, price_str):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
        
        Args:
            price_str: –°—Ç—Ä–æ–∫–∞ —Å —Ü–µ–Ω–æ–π
            
        Returns:
            float: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        """
        if not price_str:
            return 0
            
        try:
            # –£–¥–∞–ª—è–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            price_clean = str(price_str).replace(".", "").replace(",", ".").replace("‚Ç¨", "").strip()
            return float(price_clean)
        except (ValueError, TypeError):
            return 0
    
    async def process_car_data(self, car_data, model_name=None):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ KIA
        
        Args:
            car_data: –°–ª–æ–≤–∞—Ä—å —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)
            
        Returns:
            dict: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
            model = model_name or car_data.get("modelo", car_data.get("nombre", "Unknown"))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
            car_id = car_data.get("id", car_data.get("car_id", f"kia_{model}_{hash(str(car_data)) % 10000}"))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            price = self._extract_price(car_data.get("precio", car_data.get("price", "0")))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥
            year = car_data.get("year", car_data.get("ano", None))
            if not year and "title" in car_data:
                import re
                year_match = re.search(r'(\d{4})', car_data["title"])
                if year_match:
                    year = int(year_match.group(1))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = []
            if "imagenes" in car_data and car_data["imagenes"]:
                images = [img for img in car_data["imagenes"] if img]
            elif "image" in car_data and car_data["image"]:
                images = [car_data["image"]]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            url = car_data.get("url", "")
            if not url:
                url = f"{self.base_url}?modelo={model}"
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            normalized_car = {
                "car_id": str(car_id),
                "brand": "KIA",
                "model": model,
                "title": f"KIA {model} {year or ''}".strip(),
                "year": year,
                "mileage": car_data.get("kilometros", car_data.get("kms", 0)),
                "fuel_type": car_data.get("combustible", "Unknown"),
                "transmission": car_data.get("cambio", "Unknown"),
                "color": car_data.get("color", "Unknown"),
                "power": car_data.get("potencia", 0),
                "price": price,
                "images": images,
                "features": car_data.get("equipamiento", []),
                "description": car_data.get("descripcion", f"KIA {model}"),
                "dealer": "KIA Okasion",
                "dealer_location": car_data.get("ubicacion", "Espa√±a"),
                "url": url,
                "warranty": "Garant√≠a Oficial KIA",
                "last_updated": datetime.now().isoformat()
            }
            
            return normalized_car
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è KIA: {e}")
            return None
    
    async def fetch_car_details(self, car_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ ID
        
        Args:
            car_id: ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
        Returns:
            dict: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è KIA —Å ID: {car_id}")
        
        # –¢–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ,
        # –º—ã –∏–∑–≤–ª–µ—á–µ–º —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        car = await self.db.cars_collection.find_one({"car_id": car_id})
        
        if car:
            # –£–¥–∞–ª—è–µ–º _id –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if "_id" in car:
                car["_id"] = str(car["_id"])
            return car
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return None
