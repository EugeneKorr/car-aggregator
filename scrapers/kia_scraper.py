import json
import re
from datetime import datetime
from bs4 import BeautifulSoup
from config import Config
from scrapers.base_scraper import BaseScraper
from utils.logger import logger

class KiaScraper(BaseScraper):
    def __init__(self, db):
        super().__init__(db)
        self.base_url = Config.KIA_BASE_URL
        
    async def fetch_cars(self, filters=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        Args:
            filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (—Ü–µ–Ω–∞, –º–æ–¥–µ–ª—å –∏ —Ç.–¥.)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
        """
        if filters is None:
            filters = {}
        
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {json.dumps(filters)}")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        headers = self.get_headers()
        headers.update({
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "es-ES,es;q=0.9,en-US;q=0.8,en;q=0.7",
            "Referer": "https://www.kia.com/es/",
            "Origin": "https://www.kia.com"
        })
        
        # –ü–æ–ª—É—á–∞–µ–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
        success, html_content = await self.fetch_with_retry(
            self.base_url,
            method="GET",
            headers=headers
        )
        
        if not success or not html_content:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ KIA Outlet")
            return []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        cars_data = []
        try:
            # –ü–∞—Ä—Å–∏–º HTML
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            car_containers = soup.select('.vehicle-card, .car-item, .vehicle-list-item')
            
            if not car_containers:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∫–ª–∞—Å—Å–∞–º, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                car_containers = soup.select('.product-item, .listing-item, .vehicle')
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(car_containers)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ KIA")
            
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º —Å–∫—Ä–∏–ø—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            if not car_containers:
                logger.info("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤")
                
                # –ü–æ–∏—Å–∫ JSON-–¥–∞–Ω–Ω—ã—Ö –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
                script_data = self._extract_script_data(soup)
                if script_data:
                    cars_data = await self._process_script_data(script_data, filters)
                    return cars_data
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            for idx, container in enumerate(car_containers):
                car_data = await self._extract_car_data_from_html(container, idx)
                if car_data:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    if self._apply_filters(car_data, filters):
                        cars_data.append(car_data)
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        await self.db.save_car(car_data)
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö KIA: {e}")
        
        return cars_data
    
    def _extract_script_data(self, soup):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Args:
            soup: BeautifulSoup –æ–±—ä–µ–∫—Ç
            
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–ª–∏ None
        """
        # –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        scripts = soup.find_all('script')
        for script in scripts:
            script_text = script.string
            if not script_text:
                continue
                
            # –ò—â–µ–º JSON-–±–ª–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            json_pattern = r'var\s+vehicleData\s*=\s*({.*?});'
            matches = re.search(json_pattern, script_text, re.DOTALL)
            if matches:
                try:
                    return json.loads(matches.group(1))
                except json.JSONDecodeError:
                    continue
                    
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã JSON-–±–ª–æ–∫–æ–≤
            alt_patterns = [
                r'window\.initialData\s*=\s*({.*?});',
                r'var\s+cars\s*=\s*(\[.*?\]);',
                r'data-vehicles\s*=\s*\'({.*?})\'',
            ]
            
            for pattern in alt_patterns:
                matches = re.search(pattern, script_text, re.DOTALL)
                if matches:
                    try:
                        return json.loads(matches.group(1))
                    except json.JSONDecodeError:
                        continue
        
        return None
    
    async def _process_script_data(self, script_data, filters):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
        
        Args:
            script_data: –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
        """
        cars_data = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        if isinstance(script_data, dict):
            if "vehicles" in script_data:
                vehicles = script_data["vehicles"]
            elif "cars" in script_data:
                vehicles = script_data["cars"]
            else:
                vehicles = [script_data]
        elif isinstance(script_data, list):
            vehicles = script_data
        else:
            vehicles = []
        
        for idx, vehicle in enumerate(vehicles):
            car_data = await self.process_car_data(vehicle)
            if car_data and self._apply_filters(car_data, filters):
                cars_data.append(car_data)
                await self.db.save_car(car_data)
        
        return cars_data
    
    async def _extract_car_data_from_html(self, container, idx):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∏–∑ HTML-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        
        Args:
            container: HTML-—ç–ª–µ–º–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            idx: –ò–Ω–¥–µ–∫—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–ª–∏ –∏–Ω–¥–µ–∫—Å–∞
            car_id = f"kia_{idx}_{hash(container.text) % 10000}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_elem = container.select_one('.vehicle-title, .car-title, .model-name, h2, h3')
            title = title_elem.text.strip() if title_elem else "KIA Unknown Model"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å
            model = None
            model_elem = container.select_one('.model, .car-model')
            if model_elem:
                model = model_elem.text.strip()
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –º–æ–¥–µ–ª—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                model_match = re.search(r'KIA\s+([A-Za-z0-9\s]+)', title)
                if model_match:
                    model = model_match.group(1).strip()
                else:
                    model = "Unknown Model"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            price = 0
            price_elem = container.select_one('.price, .vehicle-price, .car-price')
            if price_elem:
                price_text = price_elem.text.strip()
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                price_match = re.search(r'(\d[\d\.,]+)', price_text)
                if price_match:
                    price_str = price_match.group(1).replace('.', '').replace(',', '.')
                    try:
                        price = float(price_str)
                    except ValueError:
                        pass
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥
            year = None
            year_elem = container.select_one('.year, .vehicle-year')
            if year_elem:
                year_text = year_elem.text.strip()
                year_match = re.search(r'(\d{4})', year_text)
                if year_match:
                    year = int(year_match.group(1))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            images = []
            img_elem = container.select_one('img')
            if img_elem and 'src' in img_elem.attrs:
                image_url = img_elem['src']
                if not image_url.startswith('http'):
                    image_url = f"https://www.kia.com{image_url}"
                images.append(image_url)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            url = self.base_url
            link_elem = container.select_one('a')
            if link_elem and 'href' in link_elem.attrs:
                url_path = link_elem['href']
                if not url_path.startswith('http'):
                    url = f"https://www.kia.com{url_path}"
                else:
                    url = url_path
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            car_data = {
                "car_id": car_id,
                "brand": "KIA",
                "model": model,
                "title": title,
                "year": year,
                "mileage": 0,  # –ù–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –±–µ–∑ –ø—Ä–æ–±–µ–≥–∞
                "fuel_type": "Unknown",
                "transmission": "Unknown",
                "color": "Unknown",
                "power": 0,
                "price": price,
                "images": images,
                "features": [],
                "description": title,
                "dealer": "KIA Outlet",
                "dealer_location": "Espa√±a",
                "url": url,
                "warranty": "7 a√±os",
                "last_updated": datetime.now().isoformat()
            }
            
            return car_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML: {e}")
            return None
    
    def _apply_filters(self, car_data, filters):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        
        Args:
            car_data: –î–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            filters: –§–∏–ª—å—Ç—Ä—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞–º
        """
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        if "min_price" in filters and car_data["price"] < filters["min_price"]:
            return False
        if "max_price" in filters and car_data["price"] > filters["max_price"]:
            return False
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥–µ–ª—è–º
        if "models" in filters and filters["models"]:
            if car_data["model"] not in filters["models"]:
                return False
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–±–µ–≥—É
        if "min_mileage" in filters and car_data["mileage"] < filters["min_mileage"]:
            return False
        if "max_mileage" in filters and car_data["mileage"] > filters["max_mileage"]:
            return False
        
        return True
    
    async def process_car_data(self, car_data):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ KIA
        
        Args:
            car_data: –°–ª–æ–≤–∞—Ä—å —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            
        Returns:
            dict: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            car_id = car_data.get("id", f"kia_{hash(str(car_data)) % 10000}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å
            model = car_data.get("modelDisplayName", car_data.get("model", "Unknown"))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥
            year = car_data.get("year", None)
            if isinstance(year, str):
                year_match = re.search(r'(\d{4})', year)
                if year_match:
                    year = int(year_match.group(1))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
            price = car_data.get("price", 0)
            if isinstance(price, str):
                price = price.replace(".", "").replace(",", ".").replace("‚Ç¨", "").strip()
                try:
                    price = float(price)
                except ValueError:
                    price = 0
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            images = []
            if "thumbnailImages" in car_data and car_data["thumbnailImages"]:
                images = [img for img in car_data["thumbnailImages"] if img]
            elif "images" in car_data and car_data["images"]:
                images = [img for img in car_data["images"] if img]
            elif "image" in car_data and car_data["image"]:
                images = [car_data["image"]]
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            car_url = car_data.get("url", self.base_url)
            if not car_url.startswith("http"):
                car_url = f"{self.base_url}?id={car_id}"
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            normalized_car = {
                "car_id": str(car_id),
                "brand": "KIA",
                "model": model,
                "title": f"KIA {model} {year or ''}".strip(),
                "year": year,
                "mileage": car_data.get("mileage", 0),
                "fuel_type": car_data.get("fuelType", "Unknown"),
                "transmission": car_data.get("transmissionType", "Unknown"),
                "color": car_data.get("exteriorColorName", car_data.get("color", "Unknown")),
                "power": car_data.get("power", 0),
                "price": price,
                "images": images,
                "features": car_data.get("features", []),
                "description": car_data.get("description", ""),
                "dealer": "KIA Outlet",
                "dealer_location": car_data.get("dealerCity", "Espa√±a"),
                "url": car_url,
                "warranty": car_data.get("warranty", "7 a√±os"),
                "last_updated": datetime.now().isoformat()
            }
            
            return normalized_car
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è KIA: {e}")
            return None
    
    async def fetch_car_details(self, car_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        
        Args:
            car_id: ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
        Returns:
            dict: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        # –í–º–µ—Å—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
        details_url = f"{self.base_url}?id={car_id}"
        
        success, html_content = await self.fetch_with_retry(details_url)
        
        if not success or not html_content:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è KIA {car_id}")
            return None
        
        try:
            # –ü–∞—Ä—Å–∏–º HTML
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            detail_container = soup.select_one('.vehicle-detail, .car-detail, .product-detail')
            
            if not detail_container:
                # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
                script_data = self._extract_script_data(soup)
                if script_data:
                    vehicle_data = None
                    
                    # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Å–∫—Ä–∏–ø—Ç–µ
                    if isinstance(script_data, dict):
                        if "vehicles" in script_data:
                            for vehicle in script_data["vehicles"]:
                                if str(vehicle.get("id", "")) == str(car_id):
                                    vehicle_data = vehicle
                                    break
                        else:
                            vehicle_data = script_data
                    
                    if vehicle_data:
                        car_details = await self.process_car_data(vehicle_data)
                        if car_details:
                            await self.db.save_car(car_details)
                        return car_details
            else:
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                car_data = await self._extract_car_data_from_html(detail_container, car_id)
                if car_data:
                    await self.db.save_car(car_data)
                return car_data
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è KIA: {e}")
        
        return None
