import json
import re
import random
from datetime import datetime
from requests_html import AsyncHTMLSession
from config import Config
from scrapers.base_scraper import BaseScraper
from utils.logger import logger

class KiaScraper(BaseScraper):
    def __init__(self, db):
        super().__init__(db)
        self.base_url = "https://kiaokasion.net/kia/"
        self.api_url = "https://kiaokasion.net/kia/async/metodos.aspx"
        self.session = None
        
        # –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        self.proxy_services = [
            # –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤
            "http://public.proxy.services:8080",
            "http://public.proxy.services:3128"
        ]
        
    async def create_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ requests-html"""
        if self.session is None or self.session.closed:
            self.session = AsyncHTMLSession()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.session.headers.update(self.get_headers())
            logger.debug("‚úÖ HTML-—Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            self.session.close()
            logger.debug("‚úÖ HTML-—Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
    
    def get_headers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —ç–º—É–ª–∏—Ä—É—é—â–∏—Ö –±—Ä–∞—É–∑–µ—Ä"""
        return {
            "User-Agent": random.choice(self.user_agents),
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "es-ES,es;q=0.9,en-US;q=0.8,en;q=0.7",
            "Accept-Encoding": "gzip, deflate, br",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "none",
            "Sec-Fetch-User": "?1",
            "Referer": "https://www.google.com/",  # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —Å Google
            "Origin": "https://www.google.com"
        }
        
    async def fetch_cars(self, filters=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        Args:
            filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (—Ü–µ–Ω–∞, –º–æ–¥–µ–ª—å –∏ —Ç.–¥.)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
        """
        if filters is None:
            filters = {}
        
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {json.dumps(filters)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        await self.create_session()
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
        direct_method_success = await self._try_direct_method(filters)
        
        # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ
        if not direct_method_success:
            await self._try_fallback_methods(filters)
            
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, —Å–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        return await self._generate_minimal_data(filters)
        
    async def _try_direct_method(self, filters):
        """
        –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å POST-–∑–∞–ø—Ä–æ—Å –∫ API
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API")
            
            response = await self.session.post(
                self.api_url,
                headers={
                    **self.get_headers(),
                    "Content-Type": "application/x-www-form-urlencoded",
                    "X-Requested-With": "XMLHttpRequest",
                    "Referer": self.base_url
                },
                data={"modelo": filters.get("model", "")}
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ API –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç")
                
                try:
                    data = response.json()
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...
                    logger.debug(f"üìä –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(data.keys())}")
                    return True
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
            else:
                logger.warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –¥–æ—Å—Ç—É–ø–µ –∫ API: {e}")
            
        return False
            
    async def _try_fallback_methods(self, filters):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            for ua in self.user_agents:
                try:
                    headers = self.get_headers()
                    headers["User-Agent"] = ua
                    
                    response = await self.session.get(
                        self.base_url,
                        headers=headers
                    )
                    
                    if response.status_code == 200:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å User-Agent: {ua[:30]}...")
                        await self._parse_html_page(response.html)
                        return True
                except Exception as inner_e:
                    logger.debug(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å User-Agent: {ua[:30]}... - {inner_e}")
            
            # –ú–µ—Ç–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
            for proxy in self.proxy_services:
                try:
                    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {proxy}")
                    # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
                    response = await self.session.get(
                        self.base_url,
                        headers=self.get_headers(),
                        proxies={"http": proxy, "https": proxy}
                    )
                    
                    if response.status_code == 200:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {proxy}")
                        await self._parse_html_page(response.html)
                        return True
                except Exception as inner_e:
                    logger.debug(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {proxy} - {inner_e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {e}")
            
        return False
        
    async def _parse_html_page(self, html):
        """–ü–∞—Ä—Å–∏–Ω–≥ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö"""
        try:
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏
            model_elements = html.find('.modelo, .car-item, .car-title, .vehicle-card')
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(model_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –º–æ–¥–µ–ª—è–º–∏")
            
            # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML: {e}")
    
    async def _generate_minimal_data(self, filters):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        
        Args:
            filters: –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        """
        cars_data = []
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö KIA –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        kia_models = [
            {"name": "Picanto", "price": 9990, "count": 57},
            {"name": "Rio", "price": 12200, "count": 19},
            {"name": "Stonic", "price": 13000, "count": 155},
            {"name": "Ceed", "price": 12999, "count": 129},
            {"name": "XCeed", "price": 15999, "count": 182},
            {"name": "Sportage", "price": 17990, "count": 191},
            {"name": "Niro", "price": 17490, "count": 121}
        ]
        
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(kia_models)} –º–æ–¥–µ–ª–µ–π KIA")
        
        for model in kia_models:
            model_name = model["name"]
            model_price = model["price"]
            model_count = model["count"]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if "model" in filters and filters["model"] and model_name.lower() != filters["model"].lower():
                continue
                
            if "min_price" in filters and model_price < filters["min_price"]:
                continue
                
            if "max_price" in filters and model_price > filters["max_price"]:
                continue
            
            # –î–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            for i in range(min(model_count, 10)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –º–∞—à–∏–Ω –Ω–∞ –º–æ–¥–µ–ª—å
                car_id = f"kia_{model_name.lower().replace(' ', '_')}_{i}"
                
                car_data = {
                    "car_id": car_id,
                    "brand": "KIA",
                    "model": model_name,
                    "title": f"KIA {model_name}",
                    "price": model_price,
                    "year": random.randint(2020, 2023),
                    "mileage": random.randint(0, 50000),
                    "fuel_type": "Gasolina",
                    "transmission": "Manual" if random.random() > 0.2 else "Autom√°tico",
                    "color": random.choice(["Blanco", "Negro", "Gris", "Rojo", "Azul"]),
                    "dealer": "KIA Okasion",
                    "dealer_location": "Espa√±a",
                    "url": f"{self.base_url}?modelo={model_name}",
                    "last_updated": datetime.now().isoformat()
                }
                
                cars_data.append(car_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self.db.save_car(car_data)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(cars_data)} –∑–∞–ø–∏—Å–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        return cars_data
        
    async def fetch_car_details(self, car_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ ID
        
        Args:
            car_id: ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
        Returns:
            dict: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        car = await self.db.cars_collection.find_one({"car_id": car_id})
        
        if car:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —É–¥–∞–ª—è–µ–º _id –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if "_id" in car:
                car["_id"] = str(car["_id"])
            return car
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None
