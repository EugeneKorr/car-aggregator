import json
from datetime import datetime
from config import Config
from scrapers.base_scraper import BaseScraper
from utils.logger import logger

class KiaScraper(BaseScraper):
    def __init__(self, db):
        super().__init__(db)
        self.base_url = Config.KIA_BASE_URL
        self.api_url = Config.KIA_API_URL
        
    async def fetch_cars(self, filters=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        Args:
            filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (—Ü–µ–Ω–∞, –º–æ–¥–µ–ª—å –∏ —Ç.–¥.)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
        """
        if filters is None:
            filters = {}
        
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {json.dumps(filters)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –æ–±—ä–µ–∫—Ç–µ —Å–µ—Å—Å–∏–∏
        if self.session and not self.session.closed:
            self.session.headers.update({
                "Accept": "application/json, text/javascript, */*; q=0.01",
                "Accept-Language": "es-ES,es;q=0.9,ru;q=0.8,en-US;q=0.7,en;q=0.6",
                "Content-Type": "application/x-www-form-urlencoded",
                "X-Requested-With": "XMLHttpRequest",
                "Referer": "https://kiaokasion.net/kia/",
                "Origin": "https://kiaokasion.net"
            })
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞
        post_data = {
            "modelo": filters.get("model", ""),
            "min_price": filters.get("min_price", ""),
            "max_price": filters.get("max_price", ""),
            "action": "filter_cars"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –∫ API
        success, response_data = await self.fetch_with_retry(
            self.api_url,
            method="POST",
            data=post_data
        )
        
        if not success or not response_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API KIA Okasion")
            return []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        cars_data = []
        try:
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ JSON
            if isinstance(response_data, str):
                try:
                    response_data = json.loads(response_data)
                except json.JSONDecodeError:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç")
                    return []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            total_cars = response_data.get("disponibles", 0)
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_cars} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö
            models_data = response_data.get("modelos", [])
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(models_data)} –º–æ–¥–µ–ª–µ–π KIA")
            
            # –î–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
            for model_data in models_data:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –∏ –æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if "model" in filters and filters["model"] and model_data.get("nombre", "").lower() != filters["model"].lower():
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ü–µ–Ω—ã
                model_price = self._extract_price(model_data.get("precio", "0"))
                if "min_price" in filters and model_price < filters["min_price"]:
                    continue
                if "max_price" in filters and model_price > filters["max_price"]:
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
                model_name = model_data.get("nombre", "Unknown")
                model_count = int(model_data.get("disponibles", "0"))
                
                # –ï—Å–ª–∏ —ç—Ç–æ Picanto (–∏–ª–∏ –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –º—ã —Å–æ–±–∏—Ä–∞–µ–º)
                if model_name == "Picanto" or not filters.get("model"):
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª–∏ —Å –¥—Ä—É–≥–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                    model_cars = await self._fetch_model_details(model_name)
                    cars_data.extend(model_cars)
                    
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö KIA: {e}")
        
        return cars_data
    
    async def _fetch_model_details(self, model_name):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        """
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏ KIA {model_name}")
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–æ–¥–µ–ª–∏
        post_data = {
            "modelo": model_name,
            "action": "buscar_modelo"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª–∏
        success, response_data = await self.fetch_with_retry(
            self.api_url,
            method="POST",
            data=post_data
        )
        
        if not success or not response_data:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
            return []
        
        model_cars = []
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if isinstance(response_data, str):
                try:
                    response_data = json.loads(response_data)
                except json.JSONDecodeError:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª–∏")
                    return []
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
            cars_list = response_data.get("coches", [])
            if not cars_list:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                cars_list = response_data.get("vehiculos", [])
            
            if not cars_list:
                # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                cars_list = [{"modelo": model_name, "precio": response_data.get("preciominimo", 0)}]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            for idx, car in enumerate(cars_list):
                car_data = await self.process_car_data(car, model_name)
                if car_data:
                    model_cars.append(car_data)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await self.db.save_car(car_data)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(model_cars)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –º–æ–¥–µ–ª–∏ {model_name}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏ {model_name}: {e}")
        
        return model_cars
    
    def _extract_price(self, price_str):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
        
        Args:
            price_str: –°—Ç—Ä–æ–∫–∞ —Å —Ü–µ–Ω–æ–π
            
        Returns:
            float: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        """
        if not price_str:
            return 0
            
        try:
            # –£–¥–∞–ª—è–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            price_clean = price_str.replace(".", "").replace(",", ".").replace("‚Ç¨", "").strip()
            return float(price_clean)
        except (ValueError, TypeError):
            return 0
    
    async def process_car_data(self, car_data, model_name=None):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ KIA
        
        Args:
            car_data: –°–ª–æ–≤–∞—Ä—å —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)
            
        Returns:
            dict: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
            model = model_name or car_data.get("modelo", car_data.get("nombre", "Unknown"))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
            car_id = car_data.get("id", car_data.get("car_id", f"kia_{model}_{hash(str(car_data)) % 10000}"))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            price = self._extract_price(car_data.get("precio", car_data.get("price", "0")))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥
            year = car_data.get("year", car_data.get("ano", None))
            if not year and "title" in car_data:
                import re
                year_match = re.search(r'(\d{4})', car_data["title"])
                if year_match:
                    year = int(year_match.group(1))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = []
            if "imagenes" in car_data and car_data["imagenes"]:
                images = [img for img in car_data["imagenes"] if img]
            elif "image" in car_data and car_data["image"]:
                images = [car_data["image"]]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            url = car_data.get("url", "")
            if not url:
                url = f"{self.base_url}vehiculo?id={car_id}"
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            normalized_car = {
                "car_id": str(car_id),
                "brand": "KIA",
                "model": model,
                "title": f"KIA {model} {year or ''}".strip(),
                "year": year,
                "mileage": car_data.get("kilometros", car_data.get("kms", 0)),
                "fuel_type": car_data.get("combustible", "Unknown"),
                "transmission": car_data.get("cambio", "Unknown"),
                "color": car_data.get("color", "Unknown"),
                "power": car_data.get("potencia", 0),
                "price": price,
                "images": images,
                "features": car_data.get("equipamiento", []),
                "description": car_data.get("descripcion", f"KIA {model}"),
                "dealer": "KIA Okasion",
                "dealer_location": car_data.get("ubicacion", "Espa√±a"),
                "url": url,
                "warranty": "Garant√≠a Oficial KIA",
                "last_updated": datetime.now().isoformat()
            }
            
            return normalized_car
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è KIA: {e}")
            return None
    
    async def fetch_car_details(self, car_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ ID
        
        Args:
            car_id: ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
        Returns:
            dict: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è KIA —Å ID: {car_id}")
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        post_data = {
            "car_id": car_id,
            "action": "get_car_details"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –∫ API
        success, response_data = await self.fetch_with_retry(
            self.api_url,
            method="POST",
            data=post_data
        )
        
        if not success or not response_data:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id}")
            return None
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if isinstance(response_data, str):
                try:
                    response_data = json.loads(response_data)
                except json.JSONDecodeError:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
                    return None
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            car_details = await self.process_car_data(response_data)
            
            if car_details:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self.db.save_car(car_details)
                
            return car_details
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id}: {e}")
            
        return None
