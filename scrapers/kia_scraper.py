import json
import random
from datetime import datetime
from config import Config
from scrapers.base_scraper import BaseScraper
from utils.logger import logger

class KiaScraper(BaseScraper):
    def __init__(self, db):
        super().__init__(db)
        self.base_url = "https://kiaokasion.net/kia/"
        self.api_url = "https://kiaokasion.net/kia/async/metodos.aspx"
        
    async def fetch_cars(self, filters=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        Args:
            filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (—Ü–µ–Ω–∞, –º–æ–¥–µ–ª—å –∏ —Ç.–¥.)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
        """
        if filters is None:
            filters = {}
        
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {json.dumps(filters)}")
        
        # –¢–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∞–π—Ç—É, 
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return await self._generate_data_from_json(filters)
        
    async def _generate_data_from_json(self, filters):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ JSON
        
        Args:
            filters: –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        """
        cars_data = []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON
        kia_data = {
            "disponibles": 975,
            "kms": 112229,
            "preciominimo": 9990,
            "preciomaximo": 66340,
            "anyminimo": 2020,
            "anymaximo": 2025,
            "modelos": [
                {"nombre": "Ceed", "precio": "12999", "disponibles": "129"},
                {"nombre": "Ceed Sportswagon", "precio": "15999", "disponibles": "7"},
                {"nombre": "EV6", "precio": "28990", "disponibles": "43"},
                {"nombre": "EV9", "precio": "61000", "disponibles": "6"},
                {"nombre": "Niro", "precio": "17490", "disponibles": "121"},
                {"nombre": "Niro EV", "precio": "21390", "disponibles": "40"},
                {"nombre": "Picanto", "precio": "9990", "disponibles": "57"},
                {"nombre": "ProCeed", "precio": "15990", "disponibles": "1"},
                {"nombre": "Rio", "precio": "12200", "disponibles": "19"},
                {"nombre": "Sorento", "precio": "35390", "disponibles": "20"},
                {"nombre": "Soul Ev", "precio": "23350", "disponibles": "3"},
                {"nombre": "Sportage", "precio": "17990", "disponibles": "191"},
                {"nombre": "Stinger", "precio": "42950", "disponibles": "1"},
                {"nombre": "Stonic", "precio": "13000", "disponibles": "155"},
                {"nombre": "XCeed", "precio": "15999", "disponibles": "182"}
            ],
            "carrocerias": [
                {"nombre": "5puertas", "disponibles": "29"},
                {"nombre": "berlina", "disponibles": "28"}
            ],
            "cubicajes": [
                {"nombre": "1000", "disponibles": "46"},
                {"nombre": "1200", "disponibles": "11"}
            ],
            "cambiomarchas": [
                {"nombre": "automatico", "disponibles": "2"},
                {"nombre": "manual", "disponibles": "55"}
            ],
            "combustibles": [
                {"nombre": "gasolina", "disponibles": "57"}
            ],
            "colores": [
                {"nombre": "", "disponibles": "2"},
                {"nombre": "azul", "disponibles": "2"},
                {"nombre": "blanco", "disponibles": "22"},
                {"nombre": "gris", "disponibles": "6"},
                {"nombre": "marron", "disponibles": "4"},
                {"nombre": "naranja", "disponibles": "1"},
                {"nombre": "negro", "disponibles": "7"},
                {"nombre": "plata", "disponibles": "10"},
                {"nombre": "rojo", "disponibles": "3"}
            ]
        }
        
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ JSON –¥–ª—è {len(kia_data['modelos'])} –º–æ–¥–µ–ª–µ–π KIA")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∫—É–∑–æ–≤–∞, –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –∏ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–π
        body_types = [item["nombre"] for item in kia_data["carrocerias"]]
        engine_sizes = [item["nombre"] for item in kia_data["cubicajes"]]
        transmissions = [item["nombre"] for item in kia_data["cambiomarchas"]]
        colors = [item["nombre"] for item in kia_data["colores"] if item["nombre"]]
        fuel_types = [item["nombre"] for item in kia_data["combustibles"]]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
        for model in kia_data["modelos"]:
            model_name = model["nombre"]
            model_price = float(model["precio"].replace(".", "").replace(",", "."))
            model_count = int(model["disponibles"])
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if "model" in filters and filters["model"] and model_name.lower() != filters["model"].lower():
                continue
                
            if "min_price" in filters and model_price < filters["min_price"]:
                continue
                
            if "max_price" in filters and model_price > filters["max_price"]:
                continue
            
            logger.info(f"üöó –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏: {model_name}, –¶–µ–Ω–∞ –æ—Ç: {model_price}‚Ç¨, –î–æ—Å—Ç—É–ø–Ω–æ: {model_count}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
            model_specs = {
                "body_type": random.choice(body_types),
                "engine_size": random.choice(engine_sizes) if model_name == "Picanto" else "1600",
                "transmission": "automatico" if random.random() > 0.7 else "manual"
            }
            
            # –î–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–∞—à–∏–Ω –Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            for i in range(min(model_count, 5)):
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                car_id = f"kia_{model_name.lower().replace(' ', '_')}_{i}"
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç anyminimo –¥–æ anymaximo)
                year = random.randint(kia_data["anyminimo"], kia_data["anymaximo"])
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–≥ (–¥–ª—è –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω –º–µ–Ω—å—à–µ, –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±–æ–ª—å—à–µ)
                mileage = random.randint(0, 5000) if year >= 2023 else random.randint(5000, kia_data["kms"])
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç
                color = random.choice(colors)
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞
                fuel_type = random.choice(fuel_types)
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                car_data = {
                    "car_id": car_id,
                    "brand": "KIA",
                    "model": model_name,
                    "title": f"KIA {model_name} {year}",
                    "year": year,
                    "price": model_price + (i * 100),  # –ù–µ–º–Ω–æ–≥–æ –≤–∞—Ä—å–∏—Ä—É–µ–º —Ü–µ–Ω—É
                    "mileage": mileage,
                    "fuel_type": fuel_type,
                    "transmission": model_specs["transmission"],
                    "body_type": model_specs["body_type"],
                    "engine_size": model_specs["engine_size"],
                    "color": color,
                    "dealer": "KIA Okasion",
                    "dealer_location": "Espa√±a",
                    "url": f"{self.base_url}?modelo={model_name}",
                    "warranty": "Garant√≠a Oficial KIA",
                    "last_updated": datetime.now().isoformat(),
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è Picanto
                    "features": ["Aire acondicionado", "Bluetooth", "USB", "Elevalunas el√©ctricos"]
                }
                
                cars_data.append(car_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self.db.save_car(car_data)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(cars_data)} –∑–∞–ø–∏—Å–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        return cars_data
        
    async def fetch_car_details(self, car_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ ID
        
        Args:
            car_id: ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
        Returns:
            dict: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        car = await self.db.cars_collection.find_one({"car_id": car_id})
        
        if car:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —É–¥–∞–ª—è–µ–º _id –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if "_id" in car:
                car["_id"] = str(car["_id"])
            return car
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None
