import json
import time
import asyncio
import re
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from config import Config
from scrapers.base_scraper import BaseScraper
from utils.logger import logger

class KiaScraper(BaseScraper):
    def __init__(self, db):
        super().__init__(db)
        self.base_url = "https://kiaokasion.net/kia/"
        self.api_url = "https://kiaokasion.net/kia/async/metodos.aspx"
        self.driver = None
        
    async def initialize_driver(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Selenium"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —Ç.–∫. Selenium –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
            loop = asyncio.get_event_loop()
            return await loop.run_in_executor(None, self._setup_driver)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Selenium: {e}")
            return False
    
    def _setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome"""
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            
            # –î–æ–±–∞–≤–ª—è–µ–º User-Agent
            chrome_options.add_argument(f"user-agent={self.user_agents[0]}")
            
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome: {e}")
            return False
    
    async def close_driver(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ Selenium"""
        if self.driver:
            try:
                loop = asyncio.get_event_loop()
                await loop.run_in_executor(None, lambda: self.driver.quit())
                logger.debug("‚úÖ –î—Ä–∞–π–≤–µ—Ä Selenium –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞ Selenium: {e}")
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        await self.close_driver()
        await super().close_session()
    
    async def fetch_cars(self, filters=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        Args:
            filters: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (—Ü–µ–Ω–∞, –º–æ–¥–µ–ª—å –∏ —Ç.–¥.)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
        """
        if filters is None:
            filters = {}
        
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {json.dumps(filters)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä Selenium
        initialized = await self.initialize_driver()
        if not initialized:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä Selenium")
            return []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É KIA
        cars_data = []
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, lambda: self.driver.get(self.base_url))
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await loop.run_in_executor(None, lambda: WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, ".modelo, .car-title, h2"))
            ))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö
            model_elements = await loop.run_in_executor(None, lambda: self.driver.find_elements(By.CSS_SELECTOR, ".modelo, .car-item, .car-title"))
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(model_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –º–æ–¥–µ–ª—è–º–∏ KIA")
            
            # –ò—â–µ–º XHR-–∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ Network –≤–∫–ª–∞–¥–∫–∏
            xhr_data = await self._capture_xhr_data()
            
            if xhr_data:
                # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å XHR-–¥–∞–Ω–Ω—ã–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã XHR-–¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª—è—Ö")
                cars_data = await self._process_xhr_data(xhr_data, filters)
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å XHR-–¥–∞–Ω–Ω—ã–µ, –ø–∞—Ä—Å–∏–º HTML
                logger.info("‚ö†Ô∏è XHR-–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø–∞—Ä—Å–∏–º HTML")
                cars_data = await self._process_html_data(model_elements, filters)
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π KIA")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö KIA: {e}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            await self.close_driver()
        
        return cars_data
    
    async def _capture_xhr_data(self):
        """
        –ü–µ—Ä–µ—Ö–≤–∞—Ç XHR-–¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ XHR-–∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ None
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ XHR
            loop = asyncio.get_event_loop()
            
            # –î–æ–±–∞–≤–ª—è–µ–º JavaScript-–∫–æ–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ XHR-–∑–∞–ø—Ä–æ—Å–æ–≤
            await loop.run_in_executor(None, lambda: self.driver.execute_script("""
                window.xhrData = null;
                
                // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ XHR
                var originalXHR = window.XMLHttpRequest;
                window.XMLHttpRequest = function() {
                    var xhr = new originalXHR();
                    
                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                    xhr.addEventListener('load', function() {
                        if (this.responseURL.includes('metodos.aspx')) {
                            try {
                                window.xhrData = this.responseText;
                                console.log('XHR Data captured:', window.xhrData);
                            } catch (e) {
                                console.error('Error parsing XHR response:', e);
                            }
                        }
                    });
                    
                    return xhr;
                };
            """))
            
            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ —Ñ–∏–ª—å—Ç—Ä –º–æ–¥–µ–ª–µ–π, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å XHR-–∑–∞–ø—Ä–æ—Å
            try:
                model_filter = await loop.run_in_executor(None, lambda: WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, ".modelo-filter, .filter-button, button.search"))
                ))
                await loop.run_in_executor(None, lambda: model_filter.click())
                
                # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è XHR-–∑–∞–ø—Ä–æ—Å–∞
                await asyncio.sleep(3)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                xhr_response = await loop.run_in_executor(None, lambda: self.driver.execute_script("return window.xhrData;"))
                
                if xhr_response:
                    logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç XHR: {xhr_response[:200]}...")
                    try:
                        return json.loads(xhr_response)
                    except json.JSONDecodeError:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON –∏–∑ XHR-–æ—Ç–≤–µ—Ç–∞")
                        return None
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ñ–∏–ª—å—Ç—Ä –º–æ–¥–µ–ª–µ–π: {e}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–µ XHR-–¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return None
    
    async def _process_xhr_data(self, xhr_data, filters):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ XHR-–æ—Ç–≤–µ—Ç–∞
        
        Args:
            xhr_data: –î–∞–Ω–Ω—ã–µ XHR-–æ—Ç–≤–µ—Ç–∞
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            list: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        """
        cars_data = []
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ –∏–∑ XHR
            if "modelos" in xhr_data:
                models = xhr_data["modelos"]
                
                for model in models:
                    model_name = model.get("nombre", "Unknown")
                    model_price = self._extract_price(model.get("precio", "0"))
                    model_count = int(model.get("disponibles", "0"))
                    
                    logger.info(f"üöó –ú–æ–¥–µ–ª—å: {model_name}, –¶–µ–Ω–∞ –æ—Ç: {model_price}‚Ç¨, –î–æ—Å—Ç—É–ø–Ω–æ: {model_count}")
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    if "model" in filters and filters["model"] and model_name.lower() != filters["model"].lower():
                        continue
                    
                    if "min_price" in filters and model_price < filters["min_price"]:
                        continue
                    
                    if "max_price" in filters and model_price > filters["max_price"]:
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                    for i in range(model_count):
                        car_id = f"kia_{model_name.lower().replace(' ', '_')}_{i}"
                        
                        car_data = {
                            "car_id": car_id,
                            "brand": "KIA",
                            "model": model_name,
                            "title": f"KIA {model_name}",
                            "price": model_price,
                            "dealer": "KIA Okasion",
                            "dealer_location": "Espa√±a",
                            "url": f"{self.base_url}?modelo={model_name}",
                            "last_updated": datetime.now().isoformat()
                        }
                        
                        cars_data.append(car_data)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        await self.db.save_car(car_data)
                
                return cars_data
            
            else:
                logger.warning("‚ö†Ô∏è –í XHR-–¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'modelos'")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ XHR-–¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return cars_data
    
    async def _process_html_data(self, model_elements, filters):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        Args:
            model_elements: –°–ø–∏—Å–æ–∫ HTML-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –º–æ–¥–µ–ª—è–º–∏
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            list: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        """
        cars_data = []
        
        try:
            loop = asyncio.get_event_loop()
            
            for idx, model_elem in enumerate(model_elements):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                model_text = await loop.run_in_executor(None, lambda: model_elem.text.strip())
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ —Ü–µ–Ω—É
                model_name = "Unknown"
                model_price = 0
                
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
                model_match = re.search(r"(?:KIA\s+)?([A-Za-z0-9\s]+)", model_text)
                if model_match:
                    model_name = model_match.group(1).strip()
                
                # –ò—â–µ–º —Ü–µ–Ω—É
                price_match = re.search(r"(\d[\d\.,]+)(?:\s*‚Ç¨)?", model_text)
                if price_match:
                    model_price = self._extract_price(price_match.group(1))
                
                logger.debug(f"üöó –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å –∏–∑ HTML: {model_name}, –¶–µ–Ω–∞: {model_price}‚Ç¨")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if "model" in filters and filters["model"] and model_name.lower() != filters["model"].lower():
                    continue
                
                if "min_price" in filters and model_price < filters["min_price"]:
                    continue
                
                if "max_price" in filters and model_price > filters["max_price"]:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                car_id = f"kia_{model_name.lower().replace(' ', '_')}_{idx}"
                
                car_data = {
                    "car_id": car_id,
                    "brand": "KIA",
                    "model": model_name,
                    "title": f"KIA {model_name}",
                    "price": model_price,
                    "dealer": "KIA Okasion",
                    "dealer_location": "Espa√±a",
                    "url": f"{self.base_url}?modelo={model_name}",
                    "last_updated": datetime.now().isoformat()
                }
                
                cars_data.append(car_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self.db.save_car(car_data)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTML-–¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return cars_data
    
    def _extract_price(self, price_str):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
        
        Args:
            price_str: –°—Ç—Ä–æ–∫–∞ —Å —Ü–µ–Ω–æ–π
            
        Returns:
            float: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        """
        if not price_str:
            return 0
            
        try:
            # –£–¥–∞–ª—è–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            price_clean = str(price_str).replace(".", "").replace(",", ".").replace("‚Ç¨", "").strip()
            return float(price_clean)
        except (ValueError, TypeError):
            return 0
    
    async def fetch_car_details(self, car_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ ID
        
        Args:
            car_id: ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
        Returns:
            dict: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        car = await self.db.cars_collection.find_one({"car_id": car_id})
        
        if car:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —É–¥–∞–ª—è–µ–º _id –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if "_id" in car:
                car["_id"] = str(car["_id"])
            return car
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å —Å–∞–π—Ç–∞
        model_name = None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ ID
        model_match = re.search(r"kia_([a-z_]+)_\d+", car_id)
        if model_match:
            model_name = model_match.group(1).replace("_", " ").title()
        
        if not model_name:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑ ID: {car_id}")
            return None
        
        # –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        cars = await self.fetch_cars({"model": model_name})
        
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ ID
        for car in cars:
            if car["car_id"] == car_id:
                return car
        
        return None
