import asyncio
import argparse
import os
import sys
import time
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("kia_updater")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ scripts
if not os.path.exists("scripts"):
    os.makedirs("scripts", exist_ok=True)

# –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
SCRIPTS_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "scripts")

async def run_selenium_collector():
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø–æ–º–æ—â—å—é Selenium"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø–æ–º–æ—â—å—é Selenium...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        from selenium import webdriver
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from webdriver_manager.chrome import ChromeDriverManager
        from dotenv import load_dotenv
        import json
        import random
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        from motor.motor_asyncio import AsyncIOMotorClient
        from pymongo import MongoClient
        
        MONGO_URL = os.getenv("MONGO_URL", "mongodb://localhost:27017")
        client = MongoClient(MONGO_URL)
        db = client["test"]
        car_ids_collection = db["car_ids"]  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Selenium
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--window-size=1920,1080")
        
        # –î–æ–±–∞–≤–ª—è–µ–º User-Agent
        chrome_options.add_argument("user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15")
        
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver...")
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        # JavaScript –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ XHR
        xhr_script = """
            window.xhrData = null;
            
            // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ XHR
            var originalXHR = window.XMLHttpRequest;
            window.XMLHttpRequest = function() {
                var xhr = new originalXHR();
                
                // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                xhr.addEventListener('load', function() {
                    if (this.responseURL && this.responseURL.includes('metodos.aspx')) {
                        try {
                            window.xhrData = this.responseText;
                            console.log('XHR Data captured:', window.xhrData.substring(0, 100) + '...');
                        } catch (e) {
                            console.error('Error handling XHR response:', e);
                        }
                    }
                });
                
                return xhr;
            };
        """
        
        driver.execute_script(xhr_script)
        logger.info("‚úÖ WebDriver –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–æ–±–∞–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ XHR")
        
        try:
            # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π KIA
            models = [
                "Ceed", "Ceed Sportswagon", "EV6", "EV9", "Niro", "Niro EV", 
                "Picanto", "ProCeed", "Rio", "Sorento", "Soul Ev", 
                "Sportage", "Stinger", "Stonic", "XCeed"
            ]
            
            all_ids_count = 0
            models_stats = {}
            
            for model_name in models:
                logger.info(f"üöó –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏: {model_name}")
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É KIA
                driver.get("https://kiaokasion.net/kia/")
                time.sleep(3)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                
                # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ XHR
                driver.execute_script("window.xhrData = null;")
                
                try:
                    # –ù–∞—Ö–æ–¥–∏–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –º–æ–¥–µ–ª–∏
                    # –≠—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞!
                    model_selector = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, ".model-selector, .filter-modelo, input[name='modelo']"))
                    )
                    model_selector.clear()
                    model_selector.send_keys(model_name)
                    
                    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
                    search_button = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, ".search-button, button.buscar, button[type='submit']"))
                    )
                    search_button.click()
                    
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ XHR-–¥–∞–Ω–Ω—ã—Ö
                    time.sleep(5)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ XHR-–¥–∞–Ω–Ω—ã—Ö
                    xhr_data = driver.execute_script("return window.xhrData;")
                    
                    car_ids = []
                    
                    if xhr_data:
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã XHR-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
                        try:
                            data = json.loads(xhr_data)
                            if "vehiculos" in data:
                                car_ids = [car["id"] for car in data["vehiculos"] if "id" in car]
                                logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(car_ids)} ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ XHR")
                            else:
                                logger.warning(f"‚ö†Ô∏è –í XHR-–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–ª—é—á–∞ 'vehiculos' –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
                        except json.JSONDecodeError as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: {e}")
                    
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —á–µ—Ä–µ–∑ XHR, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ HTML
                    if not car_ids:
                        logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ HTML –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
                        car_elements = driver.find_elements(By.CSS_SELECTOR, ".car-item, .vehicle-card, [data-id]")
                        
                        for element in car_elements:
                            car_id = element.get_attribute("data-id") or element.get_attribute("id")
                            if car_id:
                                car_ids.append(car_id)
                        
                        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(car_ids)} ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ HTML")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    if car_ids:
                        car_ids_collection.update_one(
                            {"model": model_name},
                            {
                                "$set": {
                                    "ids": car_ids,
                                    "last_updated": datetime.now().isoformat()
                                }
                            },
                            upsert=True
                        )
                        
                        all_ids_count += len(car_ids)
                        models_stats[model_name] = len(car_ids)
                        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(car_ids)} ID –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
                        models_stats[model_name] = 0
                    
                except Exception as model_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–µ–ª–∏ {model_name}: {model_error}")
                    models_stats[model_name] = 0
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ —Ä–∞–∑–Ω—ã–º –º–æ–¥–µ–ª—è–º
                time.sleep(random.uniform(2, 4))
            
            logger.info(f"‚úÖ –°–±–æ—Ä ID –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {all_ids_count} ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º: {json.dumps(models_stats, indent=2)}")
            
            return True
            
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            driver.quit()
            logger.info("‚úÖ WebDriver –∑–∞–∫—Ä—ã—Ç")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {e}")
        return False

async def update_car_details():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –ø–æ –∏—Ö ID"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        import aiohttp
        import json
        import random
        from dotenv import load_dotenv
        from motor.motor_asyncio import AsyncIOMotorClient
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        MONGO_URL = os.getenv("MONGO_URL", "mongodb://localhost:27017")
        client = AsyncIOMotorClient(MONGO_URL)
        db = client["test"]
        cars_collection = db["cars"]
        car_ids_collection = db["car_ids"]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        API_URL = "https://kiaokasion.net/kia/async/metodos.aspx"
        BASE_URL = "https://kiaokasion.net/kia/"
        
        # –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ —Å –∏—Ö ID
            models = await car_ids_collection.find().to_list(length=100)
            
            if not models:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö –∏ –∏—Ö ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            total_updated = 0
            total_errors = 0
            
            for model_data in models:
                model_name = model_data["model"]
                car_ids = model_data.get("ids", [])
                
                logger.info(f"üöó –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏ {model_name}: –Ω–∞–π–¥–µ–Ω–æ {len(car_ids)} ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
                
                model_updated = 0
                model_errors = 0
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ID –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 5-10
                max_ids_per_model = 20
                
                # –ï—Å–ª–∏ ID –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
                if len(car_ids) > max_ids_per_model:
                    logger.info(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ID –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name} –¥–æ {max_ids_per_model}")
                    car_ids = random.sample(car_ids, max_ids_per_model)
                
                for car_id in car_ids:
                    try:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                        data = {
                            "accion": "actualizarFicha",
                            "idcoche": car_id
                        }
                        
                        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                        headers = {
                            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15",
                            "Content-Type": "application/x-www-form-urlencoded",
                            "X-Requested-With": "XMLHttpRequest",
                            "Referer": BASE_URL,
                            "Origin": "https://kiaokasion.net",
                            "Accept": "application/json, text/javascript, */*; q=0.01"
                        }
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
                        async with session.post(API_URL, data=data, headers=headers) as response:
                            if response.status == 200:
                                content_type = response.headers.get('Content-Type', '')
                                
                                car_data = None
                                if 'application/json' in content_type:
                                    car_data = await response.json()
                                else:
                                    try:
                                        text = await response.text()
                                        car_data = json.loads(text)
                                    except json.JSONDecodeError:
                                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç –¥–ª—è ID {car_id}")
                                
                                if car_data:
                                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                                    success = await process_car_data(car_data, car_id, model_name, cars_collection)
                                    
                                    if success:
                                        model_updated += 1
                                        total_updated += 1
                                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {model_name} (ID: {car_id})")
                                    else:
                                        model_errors += 1
                                        total_errors += 1
                                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id}")
                                else:
                                    model_errors += 1
                                    total_errors += 1
                            else:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id}: –∫–æ–¥ {response.status}")
                                model_errors += 1
                                total_errors += 1
                    
                    except Exception as car_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id}: {car_error}")
                        model_errors += 1
                        total_errors += 1
                    
                    # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(random.uniform(1, 3))
                
                logger.info(f"üìä –ú–æ–¥–µ–ª—å {model_name}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {model_updated}, –æ—à–∏–±–æ–∫ {model_errors}")
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {total_updated}, –æ—à–∏–±–æ–∫ {total_errors}")
            
            return True
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return False

async def process_car_data(car_data, car_id, model_name, cars_collection):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        modelo = car_data.get("modelo", model_name)
        version = car_data.get("version", "")
        brand = car_data.get("marca", "KIA")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π car_id –¥–ª—è –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
        unique_car_id = f"kia_{modelo.lower().replace(' ', '_')}_{car_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = []
        if car_data.get("imagenes"):
            image_urls = car_data["imagenes"].split("|")
            images = [f"https://kiaokasion.net/kia/imagenes/{url}" for url in image_urls if url]
        elif car_data.get("imagen"):
            images = [car_data["imagen"]]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        features = []
        if car_data.get("resumen_equipamiento_serie"):
            if isinstance(car_data["resumen_equipamiento_serie"], list):
                features = car_data["resumen_equipamiento_serie"]
            elif isinstance(car_data["resumen_equipamiento_serie"], str):
                features = car_data["resumen_equipamiento_serie"].split("|")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
        year = None
        if car_data.get("any"):
            try:
                year = int(car_data["any"])
            except (ValueError, TypeError):
                pass
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
        price = 0
        if car_data.get("precio"):
            price_str = car_data["precio"].replace(".", "").replace(",", ".").replace("‚Ç¨", "").strip()
            try:
                price = float(price_str)
            except (ValueError, TypeError):
                pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        processed_car = {
            "car_id": unique_car_id,
            "idcoche": car_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID
            "brand": brand,
            "model": modelo,
            "version": version,
            "title": f"{brand} {modelo} {version}".strip(),
            "year": year,
            "mileage": extract_number(car_data.get("kilometros", "0")),
            "fuel_type": car_data.get("combustible", "Unknown"),
            "transmission": car_data.get("transmision", "Unknown"),
            "color_exterior": car_data.get("color_exterior", "Unknown"),
            "color_interior": car_data.get("color_interior", "Unknown"),
            "body_type": car_data.get("carroceria", "Unknown"),
            "power": extract_number(car_data.get("potencia", "0")),
            "price": price,
            "price_cash": extract_price(car_data.get("precio_alcontado", "0")),
            "images": images,
            "features": features,
            "dealer": car_data.get("concesionario", "KIA Okasion"),
            "dealer_location": car_data.get("poblacion", "Espa√±a"),
            "dealer_email": car_data.get("emailconcesionario", ""),
            "dealer_phone": car_data.get("telefono", ""),
            "dealer_address": car_data.get("direccion", ""),
            "matriculation_date": car_data.get("matriculacion", ""),
            "license_plate": car_data.get("matricula", ""),
            "url": f"{BASE_URL}?idcoche={car_id}",
            "warranty": f"{car_data.get('garantia', '')} –º–µ—Å—è—Ü–µ–≤",
            "engine_size": car_data.get("cubicaje", ""),
            "emission_label": car_data.get("distintivo", ""),
            "co2": car_data.get("co2", ""),
            "consumption_combined": car_data.get("consumo_combinado", ""),
            "consumption_urban": car_data.get("consumo_urbano", ""),
            "consumption_extra": car_data.get("consumo_extra", ""),
            "is_active": True,
            "last_updated": datetime.now().isoformat()
        }
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        existing_car = await cars_collection.find_one({"car_id": unique_car_id})
        if not existing_car:
            processed_car["first_seen"] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        result = await cars_collection.update_one(
            {"car_id": unique_car_id},
            {"$set": processed_car},
            upsert=True
        )
        
        return True
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id}: {e}")
        return False

def extract_price(price_str):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not price_str:
        return 0
        
    try:
        price_clean = str(price_str).replace(".", "").replace(",", ".").replace("‚Ç¨", "").strip()
        return float(price_clean)
    except (ValueError, TypeError):
        return 0

def extract_number(number_str):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not number_str:
        return 0
        
    try:
        import re
        number_match = re.search(r'(\d[\d\.,]*)', str(number_str))
        if number_match:
            number_clean = number_match.group(1).replace(".", "").replace(",", ".")
            return int(float(number_clean))
        return 0
    except (ValueError, TypeError):
        return 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    parser = argparse.ArgumentParser(description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö KIA")
    parser.add_argument("--full", action="store_true", help="–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–±–æ—Ä ID –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)")
    parser.add_argument("--ids-only", action="store_true", help="–¢–æ–ª—å–∫–æ —Å–±–æ—Ä ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    parser.add_argument("--details-only", action="store_true", help="–¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    args = parser.parse_args()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö KIA")
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    if args.ids_only:
        # –¢–æ–ª—å–∫–æ —Å–±–æ—Ä ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        await run_selenium_collector()
    elif args.details_only:
        # –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await update_car_details()
    else:
        # –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # –®–∞–≥ 1: –°–±–æ—Ä ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        ids_success = await run_selenium_collector()
        
        if ids_success:
            # –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await update_car_details()
        else:
            logger.error("‚ùå –ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–±–æ—Ä–µ ID")
    
    logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
