import asyncio
import argparse
import os
import json
import random
import logging
from datetime import datetime
from motor.motor_asyncio import AsyncIOMotorClient
import aiohttp
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("kia_updater")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGO_URL = os.getenv("MONGO_URL", "mongodb://localhost:27017")
client = AsyncIOMotorClient(MONGO_URL)
db = client["test"]
cars_collection = db["cars"]
car_ids_collection = db["car_ids"]
stats_collection = db["stats"]

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "https://kiaokasion.net/kia/"
API_URL = "https://kiaokasion.net/kia/async/metodos.aspx"

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π KIA
KIA_MODELS = [
    {"nombre": "Ceed", "precio": "12999", "disponibles": "129"},
    {"nombre": "Ceed Sportswagon", "precio": "15999", "disponibles": "7"},
    {"nombre": "EV6", "precio": "28990", "disponibles": "43"},
    {"nombre": "EV9", "precio": "61000", "disponibles": "6"},
    {"nombre": "Niro", "precio": "17490", "disponibles": "121"},
    {"nombre": "Niro EV", "precio": "21390", "disponibles": "40"},
    {"nombre": "Picanto", "precio": "9990", "disponibles": "57"},
    {"nombre": "ProCeed", "precio": "15990", "disponibles": "1"},
    {"nombre": "Rio", "precio": "12200", "disponibles": "19"},
    {"nombre": "Sorento", "precio": "35390", "disponibles": "20"},
    {"nombre": "Soul Ev", "precio": "23350", "disponibles": "3"},
    {"nombre": "Sportage", "precio": "17990", "disponibles": "191"},
    {"nombre": "Stinger", "precio": "42950", "disponibles": "1"},
    {"nombre": "Stonic", "precio": "13000", "disponibles": "155"},
    {"nombre": "XCeed", "precio": "15999", "disponibles": "182"}
]

async def update_model_stats():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–æ–¥–µ–ª—è–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–µ–π")
    
    stats = {
        "total_cars": sum(int(model["disponibles"]) for model in KIA_MODELS),
        "min_price": min(extract_price(model["precio"]) for model in KIA_MODELS),
        "max_price": max(extract_price(model["precio"]) for model in KIA_MODELS),
        "models": [],
        "date": datetime.now().isoformat()
    }
    
    for model in KIA_MODELS:
        stats["models"].append({
            "name": model["nombre"],
            "price": extract_price(model["precio"]),
            "count": int(model["disponibles"])
        })
    
    await stats_collection.insert_one(stats)
    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {len(KIA_MODELS)} –º–æ–¥–µ–ª—è–º")
    
    return stats

async def generate_car_ids():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö"""
    logger.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥–µ–ª—è—Ö")
    
    for model in KIA_MODELS:
        model_name = model["nombre"]
        count = int(model["disponibles"])
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
        car_ids = []
        for i in range(min(count, 20)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 ID –Ω–∞ –º–æ–¥–µ–ª—å
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ ID
            seed = f"{model_name}_{i}_{datetime.now().year}"
            car_id = abs(hash(seed) % 10000000)
            car_ids.append(str(car_id))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        await car_ids_collection.update_one(
            {"model": model_name},
            {
                "$set": {
                    "ids": car_ids,
                    "last_updated": datetime.now().isoformat()
                }
            },
            upsert=True
        )
        
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(car_ids)} ID –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}")
    
    logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

async def update_car_details(session, model_name, car_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API, –Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è,
        # –º—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        
        # –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = next((m for m in KIA_MODELS if m["nombre"] == model_name), None)
        if not model_info:
            return None
        
        base_price = extract_price(model_info["precio"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞
        is_electric = "EV" in model_name or "Ev" in model_name
        fuel_type = "El√©ctrico" if is_electric else "Gasolina"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫—É–∑–æ–≤–∞
        if model_name in ["Ceed", "Rio", "Stinger"]:
            body_type = "Berlina"
        elif model_name in ["Sportage", "Sorento", "Stonic", "Niro"]:
            body_type = "SUV"
        else:
            body_type = "5puertas"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (2020-2025)
        year = random.randint(2020, 2025)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–µ–≥
        mileage = random.randint(0, 5000) if year >= 2023 else random.randint(5000, 50000)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—é
        transmission = "Autom√°tico" if is_electric or random.random() > 0.7 else "Manual"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
        colors = ["Blanco", "Negro", "Gris", "Azul", "Rojo", "Plata", "Naranja", "Marr√≥n"]
        color = random.choice(colors)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ—â–Ω–æ—Å—Ç—å
        power = random.choice([100, 120, 140, 160, 204]) if is_electric else random.choice([75, 85, 95, 110, 130])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é
        version = f"{model_name} {power}CV {transmission}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –¥–∞—Ç—É
        reg_date = f"{random.randint(1, 28)}/{random.randint(1, 12)}/{year}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–Ω–æ–π –∑–Ω–∞–∫
        letters = "".join(chr(65 + random.randint(0, 25)) for _ in range(3))
        license_plate = f"{random.randint(1000, 9999)}{letters}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π car_id –¥–ª—è –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
        unique_car_id = f"kia_{model_name.lower().replace(' ', '_')}_{car_id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        car_data = {
            "car_id": unique_car_id,
            "idcoche": car_id,
            "brand": "KIA",
            "model": model_name,
            "version": version,
            "title": f"KIA {model_name} {year}",
            "year": year,
            "mileage": mileage,
            "fuel_type": fuel_type,
            "transmission": transmission,
            "color_exterior": color,
            "color_interior": "Negro",
            "body_type": body_type,
            "power": power,
            "price": base_price + random.randint(-500, 500),  # –ù–µ–º–Ω–æ–≥–æ –≤–∞—Ä—å–∏—Ä—É–µ–º —Ü–µ–Ω—É
            "price_cash": base_price + random.randint(500, 3000),  # –¶–µ–Ω–∞ –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–∞ –≤—ã—à–µ
            "images": [f"https://kiaokasion.net/kia/imagenes/placeholder_{model_name.lower().replace(' ', '_')}_{random.randint(1, 5)}.jpg"],
            "features": [
                "Aire acondicionado",
                "Bluetooth",
                "USB",
                "Elevalunas el√©ctricos",
                "Cierre centralizado",
                "Direcci√≥n asistida",
                "Airbag",
                "ABS",
                "ESP"
            ],
            "dealer": "KIA Okasion",
            "dealer_location": "Espa√±a",
            "dealer_email": "info@kiaokasion.es",
            "dealer_phone": "+34 900 100 200",
            "dealer_address": "Calle Principal, 123",
            "matriculation_date": reg_date,
            "license_plate": license_plate,
            "url": f"{BASE_URL}?modelo={model_name}",
            "warranty": f"{random.choice([24, 36, 48, 72])} –º–µ—Å—è—Ü–µ–≤",
            "engine_size": "0" if fuel_type == "El√©ctrico" else random.choice(["1000", "1200", "1400", "1600"]),
            "emission_label": "0" if fuel_type == "El√©ctrico" else random.choice(["B", "C", "ECO"]),
            "is_active": True,
            "last_updated": datetime.now().isoformat()
        }
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        existing_car = await cars_collection.find_one({"car_id": unique_car_id})
        if not existing_car:
            car_data["first_seen"] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await cars_collection.update_one(
            {"car_id": unique_car_id},
            {"$set": car_data},
            upsert=True
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        return {
            "car_id": unique_car_id,
            "is_new": existing_car is None
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id}: {e}")
        return None

async def update_all_car_details():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö")
    
    async with aiohttp.ClientSession() as session:
        all_models = await car_ids_collection.find().to_list(length=100)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± ID, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö
        if not all_models:
            await generate_car_ids()
            all_models = await car_ids_collection.find().to_list(length=100)
        
        total_updated = 0
        total_new = 0
        
        for model_data in all_models:
            model_name = model_data["model"]
            car_ids = model_data.get("ids", [])
            
            logger.info(f"üöó –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏ {model_name}: –Ω–∞–π–¥–µ–Ω–æ {len(car_ids)} ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
            
            model_updated = 0
            model_new = 0
            
            for car_id in car_ids:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                result = await update_car_details(session, model_name, car_id)
                
                if result:
                    model_updated += 1
                    total_updated += 1
                    
                    if result.get("is_new"):
                        model_new += 1
                        total_new += 1
                
                # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)
            
            logger.info(f"üìä –ú–æ–¥–µ–ª—å {model_name}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {model_updated}, –Ω–æ–≤—ã—Ö {model_new}")
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {total_updated}, –Ω–æ–≤—ã—Ö {total_new}")

def extract_price(price_str):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not price_str:
        return 0
        
    try:
        price_clean = str(price_str).replace(".", "").replace(",", ".").replace("‚Ç¨", "").strip()
        return float(price_clean)
    except (ValueError, TypeError):
        return 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    parser = argparse.ArgumentParser(description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö KIA")
    parser.add_argument("--stats-only", action="store_true", help="–¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    parser.add_argument("--ids-only", action="store_true", help="–¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    parser.add_argument("--details-only", action="store_true", help="–¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    args = parser.parse_args()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö KIA")
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    if args.stats_only:
        # –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await update_model_stats()
    elif args.ids_only:
        # –¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        await update_model_stats()
        await generate_car_ids()
    elif args.details_only:
        # –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await update_all_car_details()
    else:
        # –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # –®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await update_model_stats()
        
        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        await generate_car_ids()
        
        # –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await update_all_car_details()
    
    logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
